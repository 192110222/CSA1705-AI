from collections import deque

class BFSProblem:
    def __init__(self, initial_state, goal_state):
        self.initial_state = initial_state
        self.goal_state = goal_state

    def actions(self, state):
        return [chr(ord(state) + 1), chr(ord(state) + 2)]  # Increment by 1 or 2 alphabetically

    def result(self, state, action):
        return action

    def goal_test(self, state):
        return state == self.goal_state

def bfs_search(problem):
    queue = deque([(problem.initial_state, [])])
    visited = set()

    while queue:
        current_state, actions = queue.popleft()

        if current_state not in visited:
            print(f"Current State: {current_state}")
            if problem.goal_test(current_state):
                print("Goal state reached!")
                print("Sequence of Actions:", actions)
                return actions

            visited.add(current_state)

            for action in problem.actions(current_state):
                new_state = problem.result(current_state, action)
                print(f"Action: {action}, New State: {new_state}")
                queue.append((new_state, actions + [action]))

    print("No solution found.")
    return None

if __name__ == "__main__":
    # Example usage
    initial_state = 'A'
    goal_state = 'H'
    problem = BFSProblem(initial_state, goal_state)

    solution = bfs_search(problem)

    if solution:
        print(f"Solution found: {solution}")
    else:
        print("No solution found.")
